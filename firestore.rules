
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      // These emails are hardcoded in the auth context as well.
      let adminEmails = ['dev@sidepe.com', 'rd.lapawawoi@gmail.com'];
      return request.auth.token.email in adminEmails;
    }
    
    // Helper function to check if a request is from a signed-in user
    function isSignedIn() {
      return request.auth != null;
    }

    // Products can be read by anyone, but only managed by admins.
    match /products/{productId} {
      allow read: if true;
      allow write: if isAdmin(request.auth.uid);
    }
    
    // Blog posts can be read by anyone, but only managed by admins.
    match /blog/{postId} {
      allow read: if true;
      allow write: if isAdmin(request.auth.uid);
    }
    
    // Events can be read by anyone, but only managed by admins.
    match /events/{eventId} {
      allow read: if true;
      allow write: if isAdmin(request.auth.uid);
    }

    // Site content (hero, settings) can be read by anyone, but only managed by admins.
    match /siteContent/{docId} {
        allow read: if true;
        allow write: if isAdmin(request.auth.uid);
    }
    
     match /settings/{docId} {
        allow read: if true;
        allow write: if isAdmin(request.auth.uid);
    }

    // Orders can only be created by signed-in users, and a user can only read/manage their own orders. Admins can read all orders.
    match /orders/{orderId} {
      allow read: if (isSignedIn() && resource.data.userId == request.auth.uid) || isAdmin(request.auth.uid);
      allow create: if isSignedIn(); // Any signed-in user can create an order.
      allow update, delete: if isAdmin(request.auth.uid); // Only admins can modify orders after creation.
    }
    
    // Deny all other writes by default
    match /{document=**} {
      allow write: if false;
    }
  }
}
